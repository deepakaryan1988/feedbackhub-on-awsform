name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: feedbackhub
  ECS_CLUSTER: feedbackhub-production-cluster
  ECS_SERVICE: feedbackhub-service
  ECS_TASK_DEFINITION: feedbackhub-task
  CONTAINER_NAME: feedbackhub

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Phase 2.1 Fix: Build Next.js application before Docker build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          # Add any build-time environment variables if needed
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --no-cli-pager)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $ACCOUNT_ID"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build the Docker image
          docker build -f docker/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Output the image URI for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition \
            --output json \
            --no-cli-pager > task-definition.json

      - name: Update task definition with new image
        id: task-def
        run: |
          # Update the image URI in the task definition
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             task-definition.json > new-task-definition.json
          
          # Remove fields that can't be included in register-task-definition
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             new-task-definition.json > final-task-definition.json

      - name: Register new task definition
        id: register-task-definition
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://final-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text \
            --no-cli-pager)
          
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "New task definition registered: $TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-definition.outputs.task_def_arn }} \
            --no-cli-pager
          
          echo "ECS service updated successfully"

      # Enhanced ECS Stabilization: Real-time progress monitoring
      - name: Monitor ECS service stabilization
        run: |
          echo "üîÑ Starting ECS service stabilization monitoring..."
          echo "‚è±Ô∏è  Checking status every 10 seconds (max 10 minutes)..."
          
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            ATTEMPTS=$((ATTEMPTS + 1))
            
            # Get current service status
            SERVICE_STATUS=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,RolloutState:deployments[0].rolloutState}' \
              --output json \
              --no-cli-pager)
            
            # Extract values
            STATUS=$(echo $SERVICE_STATUS | jq -r '.Status')
            RUNNING_COUNT=$(echo $SERVICE_STATUS | jq -r '.RunningCount')
            DESIRED_COUNT=$(echo $SERVICE_STATUS | jq -r '.DesiredCount')
            ROLLOUT_STATE=$(echo $SERVICE_STATUS | jq -r '.RolloutState')
            
            echo "üìä Attempt $ATTEMPTS/$MAX_ATTEMPTS - $(date '+%H:%M:%S')"
            echo "   Status: $STATUS"
            echo "   Tasks: $RUNNING_COUNT/$DESIRED_COUNT running"
            echo "   Rollout: $ROLLOUT_STATE"
            echo "   ---"
            
            # Check if deployment is complete
            if [ "$ROLLOUT_STATE" = "COMPLETED" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
              echo "‚úÖ ECS service stabilization completed successfully!"
              echo "   All tasks are running and rollout is complete"
              
              # Additional verification: Check if targets are healthy
              echo "üîç Verifying target health..."
              TARGET_HEALTH=$(aws elbv2 describe-target-health \
                --target-group-arn arn:aws:elasticloadbalancing:ap-south-1:442740305597:targetgroup/feedbackhub-production-tg/faeacc8ba8d40fc0 \
                --query 'TargetHealthDescriptions[].TargetHealth.State' \
                --output text \
                --no-cli-pager)
              
              HEALTHY_COUNT=$(echo "$TARGET_HEALTH" | grep -c "healthy" || echo "0")
              TOTAL_COUNT=$(echo "$TARGET_HEALTH" | wc -w)
              
              echo "   Target health: $HEALTHY_COUNT/$TOTAL_COUNT healthy"
              
              if [ "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
                echo "‚úÖ All targets are healthy - deployment verified!"
                break
              else
                echo "‚ö†Ô∏è  Some targets not healthy yet, continuing to monitor..."
                sleep 10
                continue
              fi
            fi
            
            # Check for failed deployment
            if [ "$ROLLOUT_STATE" = "FAILED" ]; then
              echo "‚ùå ECS service deployment failed!"
              echo "   Rollout state: $ROLLOUT_STATE"
              exit 1
            fi
            
            # Wait 10 seconds before next check
            if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
              sleep 10
            fi
          done
          
          # Check if we hit the timeout
          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "‚ö†Ô∏è  Timeout reached after 10 minutes. Checking final status..."
            FINAL_STATUS=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,RolloutState:deployments[0].rolloutState}' \
              --output json \
              --no-cli-pager)
            
            FINAL_ROLLOUT=$(echo $FINAL_STATUS | jq -r '.RolloutState')
            FINAL_RUNNING=$(echo $FINAL_STATUS | jq -r '.RunningCount')
            FINAL_DESIRED=$(echo $FINAL_STATUS | jq -r '.DesiredCount')
            
            if [ "$FINAL_ROLLOUT" = "COMPLETED" ] && [ "$FINAL_RUNNING" -eq "$FINAL_DESIRED" ]; then
              echo "‚úÖ Service stabilized successfully (completed during timeout check)"
            else
              echo "‚ùå Service stabilization timeout - final status:"
              echo "   Rollout: $FINAL_ROLLOUT"
              echo "   Tasks: $FINAL_RUNNING/$FINAL_DESIRED"
              exit 1
            fi
          fi

      - name: Get service status
        run: |
          echo "=== Final Service Status ==="
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}' \
            --output table \
            --no-cli-pager

      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üì¶ Image: ${{ steps.build-image.outputs.image }}"
          echo "üîß Task Definition: ${{ steps.register-task-definition.outputs.task_def_arn }}"
          echo "üåê Service: ${{ env.ECS_SERVICE }}"
          echo "üìä Cluster: ${{ env.ECS_CLUSTER }}"
          echo "üè∑Ô∏è  Tag: latest" 